(()=>{"use strict";var e={609:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/\n   v5.0.1 | 20191019\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n\tdisplay: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n\tline-height: 1;\n}\nmenu, ol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n","",{version:3,sources:["webpack://./node_modules/reset-css/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA,kDAAkD;AAClD;IACI,aAAa;AACjB;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/\n   v5.0.1 | 20191019\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n\tdisplay: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n\tline-height: 1;\n}\nmenu, ol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n"],sourceRoot:""}]);const s=a},426:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,':root {\n  --grid-width: 95%;\n  --header-size: 1.7rem;\n  --header-padding: 4px;\n  --header-border-size: 1px;\n  --button-padding: 4px;\n  --primary-color: rgb(248, 244, 244);\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbutton,\ninput,\ntextarea {\n  font: inherit;\n}\n\ntextarea {\n  resize: none;\n}\n\nhtml,\nbody {\n  height: 100%;\n}\n\nhtml {\n  font-size: 16px;\n}\n\nbody {\n  font-family: "Lato", sans-serif;\n  display: grid;\n  grid-template-columns: minmax(auto, 200px) 4fr;\n  background-color: var(--primary-color);\n}\n\nbutton {\n  font-size: 12px;\n  border: none;\n  padding: 4px;\n  border-radius: 8px;\n}\n\nbutton:hover {\n  cursor: pointer;\n  background-color: rgb(225, 219, 219);\n}\n\n/* NAV STYLES */\n\nnav {\n  background-color: white;\n  z-index: 100;\n  position: relative;\n  box-shadow: 0px 2px 12px 1px rgba(159, 144, 144, 0.76);\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 12px 24px;\n}\n\nnav h1 {\n  font-size: 2rem;\n  font-weight: bold;\n  font-style: italic;\n  text-transform: uppercase;\n  padding: var(--header-padding);\n}\n\n#projects {\n  margin-top: 15%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 8px;\n}\n\n/* Set width to enable overflow */\n#projects :is(ul, li),\n#projects {\n  width: 100%;\n}\n\n#projects li {\n  margin-top: 2px;\n  color: rgb(174, 165, 165);\n  font-size: 14px;\n  cursor: pointer;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n#projects .active_project,\n#projects li:hover {\n  color: black;\n  font-size: inherit;\n}\n\n/* MAIN STYLES */\nmain {\n  z-index: 10;\n  position: relative;\n  padding: 12px;\n}\n\n.icon_wrapper, .description_header_wrapper {\n  display: flex;\n  align-items: center;\n}\n\nmain h2 {\n  /* MAKE LESS UGLY WITH LARGE INPUTS */\n  width: fit-content;\n  background-color: inherit;\n  margin-top: 0.7rem;\n  /* Line up project title with todo grid */\n  margin-left: calc(\n    (100% - var(--grid-width)) / 2 - var(--header-border-size) -\n      var(--header-padding)\n  );\n  font-size: var(--header-size);\n  border: none;\n  border: var(--header-border-size) solid var(--primary-color);\n  padding: var(--header-padding);\n  word-wrap: break-word;\n  white-space: normal;\n}\n\nmain h2:focus {\n  border: 1px solid black;\n  border-radius: 4px;\n  outline: none;\n}\n\n.todo_btn {\n  margin-left: calc((100% - var(--grid-width)) / 2);\n  margin-top: 0.2rem;\n  border-radius: 0px;\n}\n\n.icon_wrapper img {\n  cursor: pointer;\n  width: 18px;\n\n  margin-top: calc(var(--header-size) * 0.2);\n  opacity: 0.7;\n}\n\n.todo_grid {\n  display: grid;\n  margin: 2rem auto;\n  width: var(--grid-width);\n  text-align: center;\n}\n\n.grid_row {\n  display: grid;\n  grid-template-columns: 1fr 2fr repeat(2, 1fr);\n  border-bottom: 1px solid black;\n}\n\n.grid_row:hover:not(:first-child) {\n  font-weight: bold;\n  cursor: pointer;\n}\n\n.grid_row div {\n  padding: 8px;\n  align-items: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* These properties keep table borders consistent ( the last element\nnever has a bottom border, the rest must ) */\n:nth-last-child(1 of .grid_row) {\n  border: none;\n}\n.active_toggle:nth-last-child(2 of .detail_toggle) {\n  border-bottom: 1px solid black;\n}\n.active_toggle:nth-last-child(1 of .detail_toggle) {\n  border-top: 1px solid black;\n  border-bottom: none;\n}\n.detail_toggle {\n  display: grid;\n  grid-template-rows: 0fr;\n  background-color: rgba(240, 240, 240);\n  text-align: left;\n  transition: grid-template-rows 500ms;\n}\n\n.active_toggle {\n  grid-template-rows: 1fr;\n  border-bottom: 1px solid black;\n}\n\n.detail_toggle > div {\n  overflow: hidden;\n}\n\n.active_toggle > div {\n  padding: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.detail_toggle h3 {\n  font-size: 1.15rem;\n}\n\n.description_header_wrapper {\n  gap: 2px;\n}\n\n.description_header_wrapper img {\n  width: 18px;\n  cursor: pointer;\n  margin-right: -4px;\n}\n\n.task_wrapper {\n  display: flex;\n  font-size: 0.9rem;\n  gap: 4px;\n  align-items: center;\n}\n\n.task_wrapper img {\n  width: 12px;\n  cursor: pointer;\n}\n\n.task_btn {\n  background-color: white;\n  border-radius: 0px;\n}\n\n.task_input_wrapper {\n  display: flex;\n  align-items: center;\n  font-size: 0.8rem;\n  gap: 4px;\n}\n\n\n\n.checked {\n  text-decoration: line-through;\n  color: gray;\n}\n\n.grid_header {\n  background-color: rgb(220, 220, 220);\n}\n\n/* DIALOG STYLES */\ndialog {\n  width: 50%;\n  height: 75%;\n  border: none;\n  border-radius: 14px;\n  padding: 0;\n  background-color: var(--primary-color);\n}\n\ndialog form {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 24px 12px;\n}\n\ndialog form label {\n  font-size: 1.2rem;\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\ndialog form :is(input, textarea, select) {\n  padding: 4px;\n  font-size: 1.1rem;\n}\n\nbutton[type="submit"] {\n  color: white;\n  background-color: rgb(140, 167, 231);\n  font-size: 1.1rem;\n  width: 33%;\n  margin: 10px auto;\n}\n\ndialog::backdrop {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.grid_row :last-child {\n  text-transform: lowercase;\n}\n\n.grid_row :last-child::first-letter {\n  text-transform: uppercase;\n}\n\n.LOW {\n  background-color: rgb(109, 221, 109);\n}\n\n.MEDIUM {\n  background-color: #fdff76;\n}\n\n.HIGH {\n  background-color: #ff7c7a;\n}\n\n.URGENT {\n  color: white;\n  background-color: rgb(255, 0, 0);\n}\n\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[':root {\r\n  --grid-width: 95%;\r\n  --header-size: 1.7rem;\r\n  --header-padding: 4px;\r\n  --header-border-size: 1px;\r\n  --button-padding: 4px;\r\n  --primary-color: rgb(248, 244, 244);\r\n}\r\n\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n\r\nbutton,\r\ninput,\r\ntextarea {\r\n  font: inherit;\r\n}\r\n\r\ntextarea {\r\n  resize: none;\r\n}\r\n\r\nhtml,\r\nbody {\r\n  height: 100%;\r\n}\r\n\r\nhtml {\r\n  font-size: 16px;\r\n}\r\n\r\nbody {\r\n  font-family: "Lato", sans-serif;\r\n  display: grid;\r\n  grid-template-columns: minmax(auto, 200px) 4fr;\r\n  background-color: var(--primary-color);\r\n}\r\n\r\nbutton {\r\n  font-size: 12px;\r\n  border: none;\r\n  padding: 4px;\r\n  border-radius: 8px;\r\n}\r\n\r\nbutton:hover {\r\n  cursor: pointer;\r\n  background-color: rgb(225, 219, 219);\r\n}\r\n\r\n/* NAV STYLES */\r\n\r\nnav {\r\n  background-color: white;\r\n  z-index: 100;\r\n  position: relative;\r\n  box-shadow: 0px 2px 12px 1px rgba(159, 144, 144, 0.76);\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 12px 24px;\r\n}\r\n\r\nnav h1 {\r\n  font-size: 2rem;\r\n  font-weight: bold;\r\n  font-style: italic;\r\n  text-transform: uppercase;\r\n  padding: var(--header-padding);\r\n}\r\n\r\n#projects {\r\n  margin-top: 15%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n/* Set width to enable overflow */\r\n#projects :is(ul, li),\r\n#projects {\r\n  width: 100%;\r\n}\r\n\r\n#projects li {\r\n  margin-top: 2px;\r\n  color: rgb(174, 165, 165);\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n#projects .active_project,\r\n#projects li:hover {\r\n  color: black;\r\n  font-size: inherit;\r\n}\r\n\r\n/* MAIN STYLES */\r\nmain {\r\n  z-index: 10;\r\n  position: relative;\r\n  padding: 12px;\r\n}\r\n\r\n.icon_wrapper, .description_header_wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\nmain h2 {\r\n  /* MAKE LESS UGLY WITH LARGE INPUTS */\r\n  width: fit-content;\r\n  background-color: inherit;\r\n  margin-top: 0.7rem;\r\n  /* Line up project title with todo grid */\r\n  margin-left: calc(\r\n    (100% - var(--grid-width)) / 2 - var(--header-border-size) -\r\n      var(--header-padding)\r\n  );\r\n  font-size: var(--header-size);\r\n  border: none;\r\n  border: var(--header-border-size) solid var(--primary-color);\r\n  padding: var(--header-padding);\r\n  word-wrap: break-word;\r\n  white-space: normal;\r\n}\r\n\r\nmain h2:focus {\r\n  border: 1px solid black;\r\n  border-radius: 4px;\r\n  outline: none;\r\n}\r\n\r\n.todo_btn {\r\n  margin-left: calc((100% - var(--grid-width)) / 2);\r\n  margin-top: 0.2rem;\r\n  border-radius: 0px;\r\n}\r\n\r\n.icon_wrapper img {\r\n  cursor: pointer;\r\n  width: 18px;\r\n\r\n  margin-top: calc(var(--header-size) * 0.2);\r\n  opacity: 0.7;\r\n}\r\n\r\n.todo_grid {\r\n  display: grid;\r\n  margin: 2rem auto;\r\n  width: var(--grid-width);\r\n  text-align: center;\r\n}\r\n\r\n.grid_row {\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr repeat(2, 1fr);\r\n  border-bottom: 1px solid black;\r\n}\r\n\r\n.grid_row:hover:not(:first-child) {\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n}\r\n\r\n.grid_row div {\r\n  padding: 8px;\r\n  align-items: center;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n/* These properties keep table borders consistent ( the last element\r\nnever has a bottom border, the rest must ) */\r\n:nth-last-child(1 of .grid_row) {\r\n  border: none;\r\n}\r\n.active_toggle:nth-last-child(2 of .detail_toggle) {\r\n  border-bottom: 1px solid black;\r\n}\r\n.active_toggle:nth-last-child(1 of .detail_toggle) {\r\n  border-top: 1px solid black;\r\n  border-bottom: none;\r\n}\r\n.detail_toggle {\r\n  display: grid;\r\n  grid-template-rows: 0fr;\r\n  background-color: rgba(240, 240, 240);\r\n  text-align: left;\r\n  transition: grid-template-rows 500ms;\r\n}\r\n\r\n.active_toggle {\r\n  grid-template-rows: 1fr;\r\n  border-bottom: 1px solid black;\r\n}\r\n\r\n.detail_toggle > div {\r\n  overflow: hidden;\r\n}\r\n\r\n.active_toggle > div {\r\n  padding: 8px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n}\r\n\r\n.detail_toggle h3 {\r\n  font-size: 1.15rem;\r\n}\r\n\r\n.description_header_wrapper {\r\n  gap: 2px;\r\n}\r\n\r\n.description_header_wrapper img {\r\n  width: 18px;\r\n  cursor: pointer;\r\n  margin-right: -4px;\r\n}\r\n\r\n.task_wrapper {\r\n  display: flex;\r\n  font-size: 0.9rem;\r\n  gap: 4px;\r\n  align-items: center;\r\n}\r\n\r\n.task_wrapper img {\r\n  width: 12px;\r\n  cursor: pointer;\r\n}\r\n\r\n.task_btn {\r\n  background-color: white;\r\n  border-radius: 0px;\r\n}\r\n\r\n.task_input_wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 0.8rem;\r\n  gap: 4px;\r\n}\r\n\r\n\r\n\r\n.checked {\r\n  text-decoration: line-through;\r\n  color: gray;\r\n}\r\n\r\n.grid_header {\r\n  background-color: rgb(220, 220, 220);\r\n}\r\n\r\n/* DIALOG STYLES */\r\ndialog {\r\n  width: 50%;\r\n  height: 75%;\r\n  border: none;\r\n  border-radius: 14px;\r\n  padding: 0;\r\n  background-color: var(--primary-color);\r\n}\r\n\r\ndialog form {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n  padding: 24px 12px;\r\n}\r\n\r\ndialog form label {\r\n  font-size: 1.2rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n}\r\n\r\ndialog form :is(input, textarea, select) {\r\n  padding: 4px;\r\n  font-size: 1.1rem;\r\n}\r\n\r\nbutton[type="submit"] {\r\n  color: white;\r\n  background-color: rgb(140, 167, 231);\r\n  font-size: 1.1rem;\r\n  width: 33%;\r\n  margin: 10px auto;\r\n}\r\n\r\ndialog::backdrop {\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.grid_row :last-child {\r\n  text-transform: lowercase;\r\n}\r\n\r\n.grid_row :last-child::first-letter {\r\n  text-transform: uppercase;\r\n}\r\n\r\n.LOW {\r\n  background-color: rgb(109, 221, 109);\r\n}\r\n\r\n.MEDIUM {\r\n  background-color: #fdff76;\r\n}\r\n\r\n.HIGH {\r\n  background-color: #ff7c7a;\r\n}\r\n\r\n.URGENT {\r\n  color: white;\r\n  background-color: rgb(255, 0, 0);\r\n}\r\n\r\n'],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var c=0;c<e.length;c++){var A=[].concat(e[c]);r&&a[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),n&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=n):A[2]=n),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),t.push(A))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var d=e[s],c=r.base?d[0]+r.base:d[0],A=i[c]||0,l="".concat(c," ").concat(A);i[c]=A+1;var p=n(l),h={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)t[p].references++,t[p].updater(h);else{var g=o(h,r);r.byIndex=s,t.splice(s,0,{identifier:l,updater:g,references:1})}a.push(l)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var d=r(e,o),c=0;c<i.length;c++){var A=n(i[c]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}i=d}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!e;)e=r[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),i=n(569),a=n.n(i),s=n(565),d=n.n(s),c=n(216),A=n.n(c),l=n(589),p=n.n(l),h=n(609),g={};g.styleTagTransform=p(),g.setAttributes=d(),g.insert=a().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=A(),t()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;var u=n(426),m={};m.styleTagTransform=p(),m.setAttributes=d(),m.insert=a().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=A(),t()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;const C=class{constructor(e,t=!1){this.description=e,this.done=t}toggle_status(){this.done=!this.done}get done(){return this._done}set done(e){this._done=e}get description(){return this._description}set description(e){if(void 0===e||""===e.trim())throw new TypeError("Tasks must have descriptions.");this._description=e}},E=class{static PRIORITY_CONST(){return{LOW:"LOW",MEDIUM:"MEDIUM",HIGH:"HIGH",URGENT:"URGENT"}}constructor(e,t,n,r){this.title=e,this.description=t,this.priority=n,this.tasks=[],this.dueDate=r}get title(){return this._title}get description(){return this._description}get priority(){return this._priority}set title(e){if(void 0===e||""===e.trim())throw new TypeError("Todos must have a title.");if(e.length>75)throw new RangeError("Todo title max 75 characters.");this._title=e}get dueDate(){return this._dueDate}set description(e){this._description=e}set priority(e){this._priority=this.constructor.PRIORITY_CONST()[e]}append_task(e){if(!(e instanceof C))throw new TypeError(`Object ${e} is not an instance of Task`);this.tasks.push(e)}set dueDate(e){this._dueDate=e}},f=class{constructor(e){this.name=e,this.todos=[]}get name(){return this._name}set name(e){if(e.length>75)throw new RangeError("Project title max 75 characters.");this._name=e}append_todo(e){if(!(e instanceof E))throw new TypeError(`Object ${e} is not an instance of Todo`);this.todos.push(e)}},b=n.p+"e8bf37419116381008dc.svg",v=n.p+"6da533e8e7494fa870c0.svg",B=n.p+"e66c5ed99285fcbc564b.svg",x=n.p+"ace64c3b7ee523ce92ef.svg",y=class{constructor(e=[]){this.projects=e,this.nav=document.getElementById("projects"),this.main=document.querySelector("main"),this.modal=document.querySelector("dialog"),this.storageSaver=new class{saveObject(e,t){localStorage.setItem(t,JSON.stringify(e))}getObject(e){return JSON.parse(localStorage.getItem(e))}saveNestedObject(e,t,n){const r=localStorage.getItem(e),o=JSON.parse(r),i=this.getNestedObject(o,n);this.modifyEntry(i,t),localStorage.setItem(e,JSON.stringify(o))}removeNestedObject(e,t){const n=localStorage.getItem(e),r=JSON.parse(n);console.log(n),console.log(r);const o=this.getNestedObject(r,t.slice(0,-1));console.log(o);const[i]=[t.slice(-1)];console.log(i),o.splice(i,1),localStorage.setItem(e,JSON.stringify(r))}modifyEntry(e,t){e instanceof Array?e.push(t):Object.assign(e,t)}getNestedObject(e,t){t=t instanceof Array?t:Array.from(t);let n=e;return t.forEach((e=>{n=n[e]})),n}}}initDisplay(){localStorage.length?this.loadLocalStorage():(this.storageSaver.saveObject(this.projects,"projects"),this.storageSaver.saveObject(this.projects.length,"projectCount")),console.log(this.projects),this.nav.querySelector("button").addEventListener("click",this.eventListeners().newProject),this.modal.addEventListener("click",this.eventListeners().dialogCloser),this.modal.addEventListener("close",this.eventListeners().formReset),this.modal.querySelector("form").addEventListener("submit",this.eventListeners().todoFormSubmit);const e=document.createElement("ul");this.nav.prepend(e),this.projects.forEach(((e,t)=>this.addProject(e,t))),this.switchProject(this.projects[0])}loadLocalStorage(){this.projects=this.storageSaver.getObject("projects"),this.projects.forEach(((e,t)=>{const n=new f(e._name);n.todos=e.todos,n.todos.forEach(((e,t)=>{const{_title:r,_priority:o,_dueDate:i,_description:a}=e,s=new E(r,a,o,i);s.tasks=e.tasks,s.tasks.forEach(((e,t)=>{const{_description:n,_done:r}=e,o=new C(n,r);s.tasks[t]=o})),n.todos[t]=s})),this.projects[t]=n}))}getCurrentProject(){const e=this.nav.querySelector(".active_project");if(!e)return;const t=e.dataset.id;return{tab:e,id:t,object:this.projects[t]}}getExpandedTodo(){const e=this.main.querySelector(".active_toggle");if(!e)return;const t=e.previousSibling,n=t.dataset.id;return{details:e,row:t,id:n,object:this.getCurrentProject().object.todos[n]}}switchProject(e){const t=this.getCurrentProject();t&&t.tab.classList.remove("active_project");const n=this.projects.indexOf(e);this.nav.querySelector(`[data-id="${n}"]`).classList.add("active_project"),this.main.textContent="";const r=document.createElement("div");r.classList.add("icon_wrapper");const o=document.createElement("h2");o.textContent=e.name,o.addEventListener("keydown",this.eventListeners().headerForceSubmit),o.addEventListener("blur",this.eventListeners().finishProjectEdit);const i=this.editIconComponent("project"),a=this.deleteIconComponent();a.dataset.type="project",r.append(o,i,a),this.main.append(r,this.addTodoBtn());const s=this.todosGrid(e);this.main.append(s)}addProject(e,t){const n=this.nav.querySelector("ul"),r=document.createElement("li");r.textContent=e.name,r.dataset.id=t,r.addEventListener("click",this.eventListeners().projectTab),n.appendChild(r)}icons(){return{edit_outline:b,edit_filled:v,delete_outline:B,delete_filled:x}}editIconComponent(e){const t=new Image;return t.src=b,t.addEventListener("mouseover",(e=>{this.eventListeners().iconHover(e,"edit")})),t.addEventListener("mouseout",(e=>{this.eventListeners().iconUnhover(e,"edit")})),"project"===e?t.addEventListener("click",this.eventListeners().beginProjectEdit):"todo"===e&&t.addEventListener("click",(e=>{const n=t.closest(".detail_toggle").dataset.id;this.eventListeners().todoFormModal(e,n)})),t}deleteIconComponent(){const e=new Image;return e.src=B,e.addEventListener("mouseover",(e=>{this.eventListeners().iconHover(e,"delete")})),e.addEventListener("mouseout",(e=>{this.eventListeners().iconUnhover(e,"delete")})),e.addEventListener("click",this.eventListeners().deleteHandler),e}todosGrid(e){const t=document.createElement("div");t.classList.add("todo_grid");const n=document.createElement("div");return n.classList.add("grid_row","grid_header"),["Title","Description","Due date","Priority"].forEach((e=>{const t=document.createElement("div");t.textContent=e,n.appendChild(t)})),t.append(n),e.todos.forEach(((e,n)=>{const r=this.todoRowComponent(e,n),o=this.todoDetailsComponent(e,n);t.append(r,o)})),t}todoRowComponent(e,t){let n;if(e.dueDate||0===e.dueDate){const t=new Date(e.dueDate);n=`${t.getMonth()+1}/${t.getDate()}/${t.getFullYear()}`}else n="None";const r=[e.title,e.description||"...",n,e.priority],o=document.createElement("div");return o.classList.add("grid_row"),o.classList.add(e.priority),r.forEach((e=>{const t=document.createElement("div");t.textContent=e,o.append(t)})),o.dataset.id=t,o.addEventListener("click",this.eventListeners().detailsExpander),o}todoDetailsComponent(e,t){const n=document.createElement("div");n.classList.add("detail_toggle");const r=document.createElement("div");r.classList.add("description_header_wrapper");const o=document.createElement("h3");o.textContent=e.title+":";const i=this.editIconComponent("todo"),a=this.deleteIconComponent();a.dataset.type="todo",r.append(o,i,a);const s=document.createElement("p");s.textContent=e.description||"No description";const d=document.createElement("h3");d.textContent="Tasks:";const c=e.tasks.map(((e,t)=>this.taskNodeComponent(e,t))),A=this.taskInputComponent(),l=document.createElement("div");return l.append(r,s,d,A,...c),n.appendChild(l),n.dataset.id=t,n}taskNodeComponent(e,t){const n=document.createElement("div"),r=document.createElement("input"),o=document.createElement("label"),i=this.deleteIconComponent();return i.dataset.type="task",r.type="checkbox",o.textContent=e.description,r.name=r.id=o.htmlFor=e.description.replaceAll(" ",""),r.checked=e.done,r.dataset.id=t,r.addEventListener("change",this.eventListeners().updateTaskStatus),e.done&&o.classList.add("checked"),n.append(r,o,i),n.classList.add("task_wrapper"),n}addTodoBtn(){const e=document.createElement("button");return e.textContent="+ Add Todo",e.classList.add("todo_btn"),e.addEventListener("click",this.eventListeners().todoFormModal),e}taskInputComponent(){const e=document.createElement("button");e.textContent="+ Add Task",e.classList.add("task_btn"),e.addEventListener("click",this.eventListeners().addTask);const t=document.createElement("input");t.placeholder="Add new task...",t.addEventListener("keydown",this.eventListeners().addTask);const n=document.createElement("div");return n.append(t,e),n.classList.add("task_input_wrapper"),n}eventListeners(){return{projectTab:e=>{const t=e.target;this.switchProject(this.projects[t.dataset.id])},newProject:e=>{const t=this.projects.length;let n=this.storageSaver.getObject("projectCount");n+=1,this.storageSaver.saveObject(n,"projectCount");const r=new f(`Project ${n}`);this.projects.push(r),this.storageSaver.saveNestedObject("projects",r,t),this.addProject(r,t),this.switchProject(r)},iconHover:(e,t)=>{const n=this.icons()[`${t}_filled`];e.target.src=n},iconUnhover:(e,t)=>{const n=this.icons()[`${t}_outline`];e.target.src=n},beginProjectEdit:e=>{const t=this.main.querySelector("h2");t.contentEditable="true",t.focus()},finishProjectEdit:e=>{const{tab:t,object:n,id:r}=this.getCurrentProject(),o=e.target.textContent;try{n.name=o,t.textContent=o,this.storageSaver.saveNestedObject("projects",n,r)}catch(t){alert("Project titles cannot exceed 75 characters"),e.target.textContent=n.name}finally{e.target.contentEditable="false"}},headerForceSubmit:e=>{13==e.keyCode&&(e.preventDefault(),e.target.blur())},todoFormModal:(e,t)=>{if(this.modal.showModal(),t){const e=this.modal.querySelector("form").elements,n=this.getExpandedTodo().object;e.title.value=n.title,e.description.value=n.description||"",console.log(n.dueDate),e.date.valueAsNumber=n.dueDate,e.priority.value=n.priority,e.index.value=t}},todoFormSubmit:e=>{e.preventDefault();const t=e.target.elements,n=t.title.value||void 0,r=t.description.value||void 0;let o=t.date.valueAsNumber;o=0===o?o:o||void 0;const i=t.priority.value,a=t.index.value;try{const t=new E(n,r,i,o),s=this.getCurrentProject().object,d=this.main.querySelector(".todo_grid");if(a){s.todos[a]=t;const e=this.main.querySelector(`.grid_row[data-id="${a}"]`),n=this.main.querySelector(`.detail_toggle[data-id="${a}"]`);e.replaceWith(this.todoRowComponent(t,a)),n.replaceWith(this.todoDetailsComponent(t,a)),this.storageSaver.saveNestedObject("projects",t,[this.getCurrentProject().id,"todos",a])}else{const e=s.todos.length;s.append_todo(t),d.append(this.todoRowComponent(t,e),this.todoDetailsComponent(t,e)),this.storageSaver.saveNestedObject("projects",t,[this.getCurrentProject().id,"todos"])}e.target.reset(),this.modal.close()}catch(e){e instanceof RangeError?alert("Todo titles cannot exceed 75 characters"):e instanceof TypeError&&alert("Todos must have titles!")}},dialogCloser:e=>{e.target===this.modal&&this.modal.close()},formReset:e=>{this.modal.querySelector("form").reset()},detailsExpander:e=>{const t=this.getExpandedTodo(),n=e.currentTarget.nextSibling;t?(t.details.classList.remove("active_toggle"),t.details!==n&&n.classList.add("active_toggle")):n.classList.add("active_toggle")},updateTaskStatus:e=>{const t=e.target.dataset.id,n=this.getExpandedTodo().object.tasks[t],r=e.target.checked,o=e.target.nextSibling;n.done=r,this.storageSaver.saveNestedObject("projects",n,[this.getCurrentProject().id,"todos",this.getExpandedTodo().id,"tasks",t]),r?o.classList.add("checked"):o.classList.remove("checked")},addTask:e=>{if(13===e.keyCode||"BUTTON"===e.target.tagName)try{const{details:e,object:t,id:n}=this.getExpandedTodo(),r=e.querySelector(".task_input_wrapper").querySelector("input"),o=new C(r.value),i=t.tasks.length;e.firstChild.append(this.taskNodeComponent(o,i)),t.append_task(o),this.storageSaver.saveNestedObject("projects",o,[this.getCurrentProject().id,"todos",n,"tasks"]),r.value=""}catch(e){alert("Tasks must have descriptions!")}},deleteHandler:e=>{const t=e.target.dataset.type;if(window.confirm(`Do you really want to delete this ${t}?`)){const n=this.getCurrentProject();if("project"===t){if(1===this.projects.length)return void alert("You can't remove your only project!");{const e=document.getElementById("projects").querySelector("ul");n.tab.remove(),Array.from(e.childNodes).slice(n.id,this.projects.length).forEach((e=>{e.dataset.id-=1})),this.projects.splice(n.id,1),this.storageSaver.removeNestedObject("projects",[n.id]),this.switchProject(this.projects[0])}}else if("todo"===t){const{details:e,id:t,row:r}=this.getExpandedTodo();e.remove(),r.remove(),n.object.todos.splice(t,1),this.storageSaver.removeNestedObject("projects",[n.id,"todos",t]),this.switchProject(n.object)}else if("task"==t){const{details:t,object:r,id:o}=this.getExpandedTodo(),i=e.target.parentElement,a=i.querySelector("input").dataset.id;i.remove(),this.storageSaver.removeNestedObject("projects",[n.id,"todos",o,"tasks",a]),r.tasks.splice(a,1);const s=t.querySelectorAll("input[type='checkbox']");Array.from(s).slice(a,s.length).forEach((e=>{e.dataset.id-=1}))}}}}}};let w;w=localStorage.length?new y:new y([new f("Default project")]),w.initDisplay()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,